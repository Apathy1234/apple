// Generated by gencpp from file pose_estimate/PoseEstimateResult.msg
// DO NOT EDIT!


#ifndef POSE_ESTIMATE_MESSAGE_POSEESTIMATERESULT_H
#define POSE_ESTIMATE_MESSAGE_POSEESTIMATERESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace pose_estimate
{
template <class ContainerAllocator>
struct PoseEstimateResult_
{
  typedef PoseEstimateResult_<ContainerAllocator> Type;

  PoseEstimateResult_()
    : header()
    , q0(0.0)
    , q1(0.0)
    , q2(0.0)
    , q3(0.0)
    , tx(0.0)
    , ty(0.0)
    , tz(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)  {
    }
  PoseEstimateResult_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , q0(0.0)
    , q1(0.0)
    , q2(0.0)
    , q3(0.0)
    , tx(0.0)
    , ty(0.0)
    , tz(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _q0_type;
  _q0_type q0;

   typedef double _q1_type;
  _q1_type q1;

   typedef double _q2_type;
  _q2_type q2;

   typedef double _q3_type;
  _q3_type q3;

   typedef double _tx_type;
  _tx_type tx;

   typedef double _ty_type;
  _ty_type ty;

   typedef double _tz_type;
  _tz_type tz;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::pose_estimate::PoseEstimateResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pose_estimate::PoseEstimateResult_<ContainerAllocator> const> ConstPtr;

}; // struct PoseEstimateResult_

typedef ::pose_estimate::PoseEstimateResult_<std::allocator<void> > PoseEstimateResult;

typedef boost::shared_ptr< ::pose_estimate::PoseEstimateResult > PoseEstimateResultPtr;
typedef boost::shared_ptr< ::pose_estimate::PoseEstimateResult const> PoseEstimateResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pose_estimate::PoseEstimateResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pose_estimate::PoseEstimateResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pose_estimate

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'pose_estimate': ['/home/sfox/slam_mono/src/pose_estimate/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pose_estimate::PoseEstimateResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_estimate::PoseEstimateResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pose_estimate::PoseEstimateResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pose_estimate::PoseEstimateResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_estimate::PoseEstimateResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_estimate::PoseEstimateResult_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pose_estimate::PoseEstimateResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c29be1721413257519ddd67c8a406938";
  }

  static const char* value(const ::pose_estimate::PoseEstimateResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc29be17214132575ULL;
  static const uint64_t static_value2 = 0x19ddd67c8a406938ULL;
};

template<class ContainerAllocator>
struct DataType< ::pose_estimate::PoseEstimateResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pose_estimate/PoseEstimateResult";
  }

  static const char* value(const ::pose_estimate::PoseEstimateResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pose_estimate::PoseEstimateResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
float64 q0\n\
float64 q1\n\
float64 q2\n\
float64 q3\n\
float64 tx\n\
float64 ty\n\
float64 tz\n\
float64 roll\n\
float64 pitch\n\
float64 yaw\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::pose_estimate::PoseEstimateResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pose_estimate::PoseEstimateResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.q0);
      stream.next(m.q1);
      stream.next(m.q2);
      stream.next(m.q3);
      stream.next(m.tx);
      stream.next(m.ty);
      stream.next(m.tz);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseEstimateResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pose_estimate::PoseEstimateResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pose_estimate::PoseEstimateResult_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "q0: ";
    Printer<double>::stream(s, indent + "  ", v.q0);
    s << indent << "q1: ";
    Printer<double>::stream(s, indent + "  ", v.q1);
    s << indent << "q2: ";
    Printer<double>::stream(s, indent + "  ", v.q2);
    s << indent << "q3: ";
    Printer<double>::stream(s, indent + "  ", v.q3);
    s << indent << "tx: ";
    Printer<double>::stream(s, indent + "  ", v.tx);
    s << indent << "ty: ";
    Printer<double>::stream(s, indent + "  ", v.ty);
    s << indent << "tz: ";
    Printer<double>::stream(s, indent + "  ", v.tz);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POSE_ESTIMATE_MESSAGE_POSEESTIMATERESULT_H
