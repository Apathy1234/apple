// Generated by gencpp from file feature_tracker/FeatureTrackerResult.msg
// DO NOT EDIT!


#ifndef FEATURE_TRACKER_MESSAGE_FEATURETRACKERRESULT_H
#define FEATURE_TRACKER_MESSAGE_FEATURETRACKERRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace feature_tracker
{
template <class ContainerAllocator>
struct FeatureTrackerResult_
{
  typedef FeatureTrackerResult_<ContainerAllocator> Type;

  FeatureTrackerResult_()
    : id(0)
    , cnt(0)
    , seq(0)
    , u0(0.0)
    , v0(0.0)
    , u1(0.0)
    , v1(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
    }
  FeatureTrackerResult_(const ContainerAllocator& _alloc)
    : id(0)
    , cnt(0)
    , seq(0)
    , u0(0.0)
    , v0(0.0)
    , u1(0.0)
    , v1(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _id_type;
  _id_type id;

   typedef int64_t _cnt_type;
  _cnt_type cnt;

   typedef int64_t _seq_type;
  _seq_type seq;

   typedef double _u0_type;
  _u0_type u0;

   typedef double _v0_type;
  _v0_type v0;

   typedef double _u1_type;
  _u1_type u1;

   typedef double _v1_type;
  _v1_type v1;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;





  typedef boost::shared_ptr< ::feature_tracker::FeatureTrackerResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::feature_tracker::FeatureTrackerResult_<ContainerAllocator> const> ConstPtr;

}; // struct FeatureTrackerResult_

typedef ::feature_tracker::FeatureTrackerResult_<std::allocator<void> > FeatureTrackerResult;

typedef boost::shared_ptr< ::feature_tracker::FeatureTrackerResult > FeatureTrackerResultPtr;
typedef boost::shared_ptr< ::feature_tracker::FeatureTrackerResult const> FeatureTrackerResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::feature_tracker::FeatureTrackerResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::feature_tracker::FeatureTrackerResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace feature_tracker

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'feature_tracker': ['/home/sfox/slam_mono/src/feature_tracker/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::feature_tracker::FeatureTrackerResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::feature_tracker::FeatureTrackerResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::feature_tracker::FeatureTrackerResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::feature_tracker::FeatureTrackerResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::feature_tracker::FeatureTrackerResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::feature_tracker::FeatureTrackerResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::feature_tracker::FeatureTrackerResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ba9d4897b1e44abdddcf84f9f72d3eb6";
  }

  static const char* value(const ::feature_tracker::FeatureTrackerResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xba9d4897b1e44abdULL;
  static const uint64_t static_value2 = 0xddcf84f9f72d3eb6ULL;
};

template<class ContainerAllocator>
struct DataType< ::feature_tracker::FeatureTrackerResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "feature_tracker/FeatureTrackerResult";
  }

  static const char* value(const ::feature_tracker::FeatureTrackerResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::feature_tracker::FeatureTrackerResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 id\n\
int64 cnt\n\
int64 seq\n\
float64 u0\n\
float64 v0\n\
float64 u1\n\
float64 v1\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::feature_tracker::FeatureTrackerResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::feature_tracker::FeatureTrackerResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.cnt);
      stream.next(m.seq);
      stream.next(m.u0);
      stream.next(m.v0);
      stream.next(m.u1);
      stream.next(m.v1);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FeatureTrackerResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::feature_tracker::FeatureTrackerResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::feature_tracker::FeatureTrackerResult_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "cnt: ";
    Printer<int64_t>::stream(s, indent + "  ", v.cnt);
    s << indent << "seq: ";
    Printer<int64_t>::stream(s, indent + "  ", v.seq);
    s << indent << "u0: ";
    Printer<double>::stream(s, indent + "  ", v.u0);
    s << indent << "v0: ";
    Printer<double>::stream(s, indent + "  ", v.v0);
    s << indent << "u1: ";
    Printer<double>::stream(s, indent + "  ", v.u1);
    s << indent << "v1: ";
    Printer<double>::stream(s, indent + "  ", v.v1);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FEATURE_TRACKER_MESSAGE_FEATURETRACKERRESULT_H
